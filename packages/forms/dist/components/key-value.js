// packages/forms/resources/js/components/key-value.js
function keyValueFormComponent({ state }) {
  return {
    state,
    rows: [],
    shouldUpdateRows: true,
    init: function() {
      this.updateRows();
      if (this.rows.length <= 0) {
        this.rows.push({ key: "", value: "" });
      } else {
        this.updateState();
      }
      this.$watch("state", (state2, oldState) => {
        const getLength = (value) => {
          if (value === null) {
            return 0;
          }
          if (Array.isArray(value)) {
            return value.length;
          }
          if (typeof value !== "object") {
            return 0;
          }
          return Object.keys(value).length;
        };
        if (getLength(state2) === 0 && getLength(oldState) === 0) {
          return;
        }
        this.updateRows();
      });
    },
    addRow: function() {
      this.rows.push({ key: "", value: "" });
      this.updateState();
    },
    deleteRow: function(index) {
      this.rows.splice(index, 1);
      if (this.rows.length <= 0) {
        this.addRow();
      }
      this.updateState();
    },
    reorderRows: function(event) {
      const rows = Alpine.raw(this.rows);
      const reorderedRow = rows.splice(event.oldIndex, 1)[0];
      rows.splice(event.newIndex, 0, reorderedRow);
      this.rows = rows;
      this.updateState();
    },
    updateRows: function() {
      if (!this.shouldUpdateRows) {
        this.shouldUpdateRows = true;
        return;
      }
      let rows = [];
      for (let [key, value] of Object.entries(this.state ?? {})) {
        rows.push({
          key,
          value
        });
      }
      this.rows = rows;
    },
    updateState: function() {
      let state2 = {};
      this.rows.forEach((row) => {
        if (row.key === "" || row.key === null) {
          return;
        }
        state2[row.key] = row.value;
      });
      this.shouldUpdateRows = false;
      this.state = state2;
    }
  };
}
export {
  keyValueFormComponent as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMva2V5LXZhbHVlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlWYWx1ZUZvcm1Db21wb25lbnQoeyBzdGF0ZSB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGUsXG5cbiAgICAgICAgcm93czogW10sXG5cbiAgICAgICAgc2hvdWxkVXBkYXRlUm93czogdHJ1ZSxcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJvd3MoKVxuXG4gICAgICAgICAgICBpZiAodGhpcy5yb3dzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3dzLnB1c2goeyBrZXk6ICcnLCB2YWx1ZTogJycgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJHdhdGNoKCdzdGF0ZScsIChzdGF0ZSwgb2xkU3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBnZXRMZW5ndGggPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGdldExlbmd0aChzdGF0ZSkgPT09IDAgJiYgZ2V0TGVuZ3RoKG9sZFN0YXRlKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVJvd3MoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRSb3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucm93cy5wdXNoKHsga2V5OiAnJywgdmFsdWU6ICcnIH0pXG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKVxuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZVJvdzogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnJvd3Muc3BsaWNlKGluZGV4LCAxKVxuXG4gICAgICAgICAgICBpZiAodGhpcy5yb3dzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSb3coKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKClcbiAgICAgICAgfSxcblxuICAgICAgICByZW9yZGVyUm93czogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCByb3dzID0gQWxwaW5lLnJhdyh0aGlzLnJvd3MpXG5cbiAgICAgICAgICAgIGNvbnN0IHJlb3JkZXJlZFJvdyA9IHJvd3Muc3BsaWNlKGV2ZW50Lm9sZEluZGV4LCAxKVswXVxuICAgICAgICAgICAgcm93cy5zcGxpY2UoZXZlbnQubmV3SW5kZXgsIDAsIHJlb3JkZXJlZFJvdylcblxuICAgICAgICAgICAgdGhpcy5yb3dzID0gcm93c1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKClcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVSb3dzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkVXBkYXRlUm93cykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlUm93cyA9IHRydWVcblxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcm93cyA9IFtdXG5cbiAgICAgICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN0YXRlID8/IHt9KSkge1xuICAgICAgICAgICAgICAgIHJvd3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yb3dzID0gcm93c1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgc3RhdGUgPSB7fVxuXG4gICAgICAgICAgICB0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJvdy5rZXkgPT09ICcnIHx8IHJvdy5rZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RhdGVbcm93LmtleV0gPSByb3cudmFsdWVcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBoYWNrIHRvIHByZXZlbnQgdGhlIGNvbXBvbmVudCBmcm9tIHVwZGF0aW5nIHJvd3MgYWdhaW5cbiAgICAgICAgICAgIC8vIGFmdGVyIGEgc3RhdGUgdXBkYXRlLCB3aGljaCB3b3VsZCBvdGhlcndpc2UgYmUgZG9uZSBieSB0aGUgYHN0YXRlYFxuICAgICAgICAgICAgLy8gd2F0Y2hlci4gSWYgcm93cyBhcmUgdXBkYXRlZCBhZ2FpbiwgZHVwbGljYXRlIGtleXMgYXJlIHJlbW92ZWQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZpbGFtZW50cGhwL2ZpbGFtZW50L2lzc3Vlcy8xMTA3XG4gICAgICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZVJvd3MgPSBmYWxzZVxuXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGVcbiAgICAgICAgfSxcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixzQkFBdUMsRUFBRSxNQUFNLEdBQUc7QUFDckQsU0FBTztBQUFBLElBQ0g7QUFBQSxJQUVBLE1BQU0sQ0FBQztBQUFBLElBRVAsa0JBQWtCO0FBQUEsSUFFbEIsTUFBTSxXQUFZO0FBQ2QsV0FBSyxXQUFXO0FBRWhCLFVBQUksS0FBSyxLQUFLLFVBQVUsR0FBRztBQUN2QixhQUFLLEtBQUssS0FBSyxFQUFFLEtBQUssSUFBSSxPQUFPLEdBQUcsQ0FBQztBQUFBLE1BQ3pDLE9BQU87QUFDSCxhQUFLLFlBQVk7QUFBQSxNQUNyQjtBQUVBLFdBQUssT0FBTyxTQUFTLENBQUNBLFFBQU8sYUFBYTtBQUN0QyxjQUFNLFlBQVksQ0FBQyxVQUFVO0FBQ3pCLGNBQUksVUFBVSxNQUFNO0FBQ2hCLG1CQUFPO0FBQUEsVUFDWDtBQUVBLGNBQUksTUFBTSxRQUFRLEtBQUssR0FBRztBQUN0QixtQkFBTyxNQUFNO0FBQUEsVUFDakI7QUFFQSxjQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzNCLG1CQUFPO0FBQUEsVUFDWDtBQUVBLGlCQUFPLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFBQSxRQUM5QjtBQUVBLFlBQUksVUFBVUEsTUFBSyxNQUFNLEtBQUssVUFBVSxRQUFRLE1BQU0sR0FBRztBQUNyRDtBQUFBLFFBQ0o7QUFFQSxhQUFLLFdBQVc7QUFBQSxNQUNwQixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsUUFBUSxXQUFZO0FBQ2hCLFdBQUssS0FBSyxLQUFLLEVBQUUsS0FBSyxJQUFJLE9BQU8sR0FBRyxDQUFDO0FBRXJDLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFFQSxXQUFXLFNBQVUsT0FBTztBQUN4QixXQUFLLEtBQUssT0FBTyxPQUFPLENBQUM7QUFFekIsVUFBSSxLQUFLLEtBQUssVUFBVSxHQUFHO0FBQ3ZCLGFBQUssT0FBTztBQUFBLE1BQ2hCO0FBRUEsV0FBSyxZQUFZO0FBQUEsSUFDckI7QUFBQSxJQUVBLGFBQWEsU0FBVSxPQUFPO0FBQzFCLFlBQU0sT0FBTyxPQUFPLElBQUksS0FBSyxJQUFJO0FBRWpDLFlBQU0sZUFBZSxLQUFLLE9BQU8sTUFBTSxVQUFVLENBQUMsRUFBRSxDQUFDO0FBQ3JELFdBQUssT0FBTyxNQUFNLFVBQVUsR0FBRyxZQUFZO0FBRTNDLFdBQUssT0FBTztBQUVaLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFFQSxZQUFZLFdBQVk7QUFDcEIsVUFBSSxDQUFDLEtBQUssa0JBQWtCO0FBQ3hCLGFBQUssbUJBQW1CO0FBRXhCO0FBQUEsTUFDSjtBQUVBLFVBQUksT0FBTyxDQUFDO0FBRVosZUFBUyxDQUFDLEtBQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLEdBQUc7QUFDdkQsYUFBSyxLQUFLO0FBQUEsVUFDTjtBQUFBLFVBQ0E7QUFBQSxRQUNKLENBQUM7QUFBQSxNQUNMO0FBRUEsV0FBSyxPQUFPO0FBQUEsSUFDaEI7QUFBQSxJQUVBLGFBQWEsV0FBWTtBQUNyQixVQUFJQSxTQUFRLENBQUM7QUFFYixXQUFLLEtBQUssUUFBUSxDQUFDLFFBQVE7QUFDdkIsWUFBSSxJQUFJLFFBQVEsTUFBTSxJQUFJLFFBQVEsTUFBTTtBQUNwQztBQUFBLFFBQ0o7QUFFQSxRQUFBQSxPQUFNLElBQUksR0FBRyxJQUFJLElBQUk7QUFBQSxNQUN6QixDQUFDO0FBT0QsV0FBSyxtQkFBbUI7QUFFeEIsV0FBSyxRQUFRQTtBQUFBLElBQ2pCO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogWyJzdGF0ZSJdCn0K
